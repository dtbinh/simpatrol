/* AgentJPanel.java */

/* Imported classes and/or interfaces. */
package agent;

/* Imported classes and/or interfaces. */
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import view.gui.etpd.EventTimeProbabilityDistributionGUI;
import view.gui.permission.PermissionGUI;
import model.action.ActionTypes;
import model.agent.Agent;
import model.agent.PerpetualAgent;
import model.agent.SeasonalAgent;
import model.etpd.EmpiricalEventTimeProbabilityDistribution;
import model.etpd.EventTimeProbabilityDistribution;
import model.etpd.NormalEventTimeProbabilityDistribution;
import model.etpd.SpecificEventTimeProbabilityDistribution;
import model.etpd.UniformEventTimeProbabilityDistribution;
import model.graph.Edge;
import model.graph.Graph;
import model.graph.Vertex;
import model.perception.PerceptionTypes;
import model.permission.ActionPermission;
import model.permission.PerceptionPermission;
import model.permission.Permission;

/** Implements the GUI panel able to configure
 *  Agent objects.
 *  
 *  @see Agent */
public class AgentJPanel extends javax.swing.JPanel {    
	/* Methods. */
    /** Constructor.
     * 
     *  @param owner The GUI that called this one.
     *  @param agent The Agent object to be configured.
     *  @param graph The graph of the patrolling simulation. */
    public AgentJPanel(JDialog owner, Agent agent, Graph graph) {
        this.initComponents();
        this.initComponents2(owner, agent, graph);
    }
    
    /** Initiates the components of the GUI.
     *  Generated by NetBeans IDE 3.6. */
    private void initComponents() {
        main_panel = new javax.swing.JPanel();
        identification_panel = new javax.swing.JPanel();
        object_id_panel = new javax.swing.JPanel();
        object_id_label = new javax.swing.JLabel();
        object_id_field = new javax.swing.JTextField();
        label_panel = new javax.swing.JPanel();
        label_label = new javax.swing.JLabel();
        label_field = new javax.swing.JTextField();
        position_stamina_allowance_panel = new javax.swing.JPanel();
        position_panel = new javax.swing.JPanel();
        vertex_panel = new javax.swing.JPanel();
        vertex_label = new javax.swing.JLabel();
        vertex_combo = new javax.swing.JComboBox();
        edge_panel = new javax.swing.JPanel();
        edge_label = new javax.swing.JLabel();
        edge_combo = new javax.swing.JComboBox();
        elapsed_length_panel = new javax.swing.JPanel();
        elapsed_length_label = new javax.swing.JLabel();
        elapsed_length_field = new javax.swing.JTextField();        
        agent_stamina_panel = new javax.swing.JPanel();        
        stamina_internal_panel = new javax.swing.JPanel();
        stamina_label = new javax.swing.JLabel();
        stamina_field = new javax.swing.JTextField();        
        max_stamina_internal_panel = new javax.swing.JPanel();
        max_stamina_label = new javax.swing.JLabel();
        max_stamina_field = new javax.swing.JTextField();        
        allowance_panel = new javax.swing.JPanel();
        perception_allowance_panel = new javax.swing.JPanel();
        agent_perception_panel = new javax.swing.JPanel();
        agent_check = new javax.swing.JCheckBox();
        agent_button = new javax.swing.JButton();        
        broadcast_perception_panel = new javax.swing.JPanel();
        broadcast_perception_check = new javax.swing.JCheckBox();
        broadcast_perception_button = new javax.swing.JButton();        
        graph_perception_panel = new javax.swing.JPanel();
        graph_check = new javax.swing.JCheckBox();
        graph_button = new javax.swing.JButton();
        stigma_perception_panel = new javax.swing.JPanel();
        stigma_check = new javax.swing.JCheckBox();
        stigma_button = new javax.swing.JButton();
        action_allowance_panel = new javax.swing.JPanel();
        broadcast_action_panel = new javax.swing.JPanel();
        broadcast_action_check = new javax.swing.JCheckBox();
        broadcast_action_button = new javax.swing.JButton();
        goto_panel = new javax.swing.JPanel();
        goto_check = new javax.swing.JCheckBox();
        goto_button = new javax.swing.JButton();        
        recharge_panel = new javax.swing.JPanel();
        recharge_check = new javax.swing.JCheckBox();
        recharge_button = new javax.swing.JButton();        
        stigmatize_panel = new javax.swing.JPanel();
        stigmatize_check = new javax.swing.JCheckBox();
        stigmatize_button = new javax.swing.JButton();        
        visit_panel = new javax.swing.JPanel();
        visit_check = new javax.swing.JCheckBox();
        visit_button = new javax.swing.JButton();
        death_panel = new javax.swing.JPanel();
        death_button = new javax.swing.JButton();
        death_combo = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        main_panel.setLayout(new java.awt.BorderLayout());

        identification_panel.setLayout(new java.awt.GridLayout(2, 0));

        identification_panel.setBorder(new javax.swing.border.TitledBorder("Identification"));
        object_id_panel.setLayout(new java.awt.BorderLayout());

        object_id_label.setText("Object ID ");
        object_id_panel.add(object_id_label, java.awt.BorderLayout.WEST);

        object_id_field.setEditable(false);
        object_id_panel.add(object_id_field, java.awt.BorderLayout.CENTER);

        identification_panel.add(object_id_panel);

        label_panel.setLayout(new java.awt.BorderLayout());

        label_label.setText("Label ");
        label_panel.add(label_label, java.awt.BorderLayout.WEST);
        label_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                label_fieldKeyReleased(evt);
            }
        });

        label_panel.add(label_field, java.awt.BorderLayout.CENTER);

        identification_panel.add(label_panel);

        main_panel.add(identification_panel, java.awt.BorderLayout.NORTH);

        position_stamina_allowance_panel.setLayout(new java.awt.BorderLayout());

        position_panel.setLayout(new java.awt.GridLayout(3, 0));

        position_panel.setBorder(new javax.swing.border.TitledBorder("Position"));
        vertex_panel.setLayout(new java.awt.BorderLayout());

        vertex_label.setText("Vertex ");
        vertex_panel.add(vertex_label, java.awt.BorderLayout.WEST);

        vertex_combo.addItem("Random");
        vertex_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertex_comboActionPerformed(evt);
            }
        });

        vertex_panel.add(vertex_combo, java.awt.BorderLayout.CENTER);

        position_panel.add(vertex_panel);

        edge_panel.setLayout(new java.awt.BorderLayout());

        edge_label.setText("Edge ");
        edge_panel.add(edge_label, java.awt.BorderLayout.WEST);

        edge_combo.addItem("Null");
        edge_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edge_comboActionPerformed(evt);
            }
        });

        edge_panel.add(edge_combo, java.awt.BorderLayout.CENTER);

        position_panel.add(edge_panel);

        elapsed_length_panel.setLayout(new java.awt.BorderLayout());

        elapsed_length_label.setText("Elapsed length ");
        elapsed_length_panel.add(elapsed_length_label, java.awt.BorderLayout.WEST);

        elapsed_length_field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        elapsed_length_field.setText("0");
        elapsed_length_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
            	elapsed_length_fieldKeyReleased(evt);
            }
        });
        
        elapsed_length_panel.add(elapsed_length_field, java.awt.BorderLayout.CENTER);

        position_panel.add(elapsed_length_panel);

        position_stamina_allowance_panel.add(position_panel, java.awt.BorderLayout.NORTH);

        agent_stamina_panel.setLayout(new java.awt.GridLayout(2, 0));

        agent_stamina_panel.setBorder(new javax.swing.border.TitledBorder("Stamina"));
        
        stamina_internal_panel.setLayout(new java.awt.BorderLayout());

        stamina_label.setText("Value ");
        stamina_internal_panel.add(stamina_label, java.awt.BorderLayout.WEST);

        stamina_field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        stamina_field.setText("1");        
        stamina_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                stamina_fieldKeyReleased(evt);
            }
        });

        stamina_internal_panel.add(stamina_field, java.awt.BorderLayout.CENTER);

        agent_stamina_panel.add(stamina_internal_panel);
        
        max_stamina_internal_panel.setLayout(new java.awt.BorderLayout());

        max_stamina_label.setText("Max value ");
        max_stamina_internal_panel.add(max_stamina_label, java.awt.BorderLayout.WEST);

        max_stamina_field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        max_stamina_field.setText("1");        
        max_stamina_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                max_stamina_fieldKeyReleased(evt);
            }
        });
        
        max_stamina_internal_panel.add(max_stamina_field, java.awt.BorderLayout.CENTER);

        agent_stamina_panel.add(max_stamina_internal_panel);
        
        position_stamina_allowance_panel.add(agent_stamina_panel, java.awt.BorderLayout.CENTER);

        allowance_panel.setLayout(new java.awt.GridLayout(1, 2));

        perception_allowance_panel.setLayout(new java.awt.GridLayout(5, 0));

        perception_allowance_panel.setBorder(new javax.swing.border.TitledBorder("Allowed perceptions"));
        agent_perception_panel.setLayout(new java.awt.BorderLayout());

        agent_check.setText("Agents");
        agent_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agent_checkActionPerformed(evt);
            }
        });

        agent_perception_panel.add(agent_check, java.awt.BorderLayout.CENTER);

        agent_button.setText("Edit");
        agent_button.setEnabled(false);
        agent_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agent_buttonActionPerformed(evt);
            }
        });

        agent_perception_panel.add(agent_button, java.awt.BorderLayout.EAST);

        perception_allowance_panel.add(agent_perception_panel);
        
        
        
        broadcast_perception_panel.setLayout(new java.awt.BorderLayout());

        broadcast_perception_check.setText("Broadcasted messages");
        broadcast_perception_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	broadcast_perception_checkActionPerformed(evt);
            }
        });

        broadcast_perception_panel.add(broadcast_perception_check, java.awt.BorderLayout.CENTER);

        broadcast_perception_button.setText("Edit");
        broadcast_perception_button.setEnabled(false);
        broadcast_perception_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	broadcast_perception_buttonActionPerformed(evt);
            }
        });

        broadcast_perception_panel.add(broadcast_perception_button, java.awt.BorderLayout.EAST);

        perception_allowance_panel.add(broadcast_perception_panel);
        
        graph_perception_panel.setLayout(new java.awt.BorderLayout());

        graph_check.setText("Graphs");
        graph_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graph_checkActionPerformed(evt);
            }
        });

        graph_perception_panel.add(graph_check, java.awt.BorderLayout.CENTER);

        graph_button.setText("Edit");
        graph_button.setEnabled(false);
        graph_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graph_buttonActionPerformed(evt);
            }
        });

        graph_perception_panel.add(graph_button, java.awt.BorderLayout.EAST);

        perception_allowance_panel.add(graph_perception_panel);

        stigma_perception_panel.setLayout(new java.awt.BorderLayout());

        stigma_check.setText("Stigmas");
        stigma_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stigma_checkActionPerformed(evt);
            }
        });

        stigma_perception_panel.add(stigma_check, java.awt.BorderLayout.CENTER);

        stigma_button.setText("Edit");
        stigma_button.setEnabled(false);
        stigma_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stigma_buttonActionPerformed(evt);
            }
        });

        stigma_perception_panel.add(stigma_button, java.awt.BorderLayout.EAST);

        perception_allowance_panel.add(stigma_perception_panel);

        allowance_panel.add(perception_allowance_panel);

        action_allowance_panel.setLayout(new java.awt.GridLayout(5, 0));

        action_allowance_panel.setBorder(new javax.swing.border.TitledBorder("Allowed actions"));
        broadcast_action_panel.setLayout(new java.awt.BorderLayout());

        broadcast_action_check.setText("Broadcast message");
        broadcast_action_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	broadcast_action_checkActionPerformed(evt);
            }
        });

        broadcast_action_panel.add(broadcast_action_check, java.awt.BorderLayout.CENTER);

        broadcast_action_button.setText("Edit");
        broadcast_action_button.setEnabled(false);
        broadcast_action_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	broadcast_action_buttonActionPerformed(evt);
            }
        });

        broadcast_action_panel.add(broadcast_action_button, java.awt.BorderLayout.EAST);

        action_allowance_panel.add(broadcast_action_panel);
        
        recharge_panel.setLayout(new java.awt.BorderLayout());

        recharge_check.setText("Recharge stamina");
        recharge_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	recharge_checkActionPerformed(evt);
            }
        });

        recharge_panel.add(recharge_check, java.awt.BorderLayout.CENTER);

        recharge_button.setText("Edit");
        recharge_button.setEnabled(false);
        recharge_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	recharge_buttonActionPerformed(evt);
            }
        });

        recharge_panel.add(recharge_button, java.awt.BorderLayout.EAST);

        action_allowance_panel.add(recharge_panel);
        
        stigmatize_panel.setLayout(new java.awt.BorderLayout());

        stigmatize_check.setText("Stigmatize");
        stigmatize_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	stigmatize_checkActionPerformed(evt);
            }
        });

        stigmatize_panel.add(stigmatize_check, java.awt.BorderLayout.CENTER);

        stigmatize_button.setText("Edit");
        stigmatize_button.setEnabled(false);
        stigmatize_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	stigmatize_buttonActionPerformed(evt);
            }
        });

        stigmatize_panel.add(stigmatize_button, java.awt.BorderLayout.EAST);

        action_allowance_panel.add(stigmatize_panel);
        
        visit_panel.setLayout(new java.awt.BorderLayout());

        visit_check.setText("Visit vertexes");
        visit_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	visit_checkActionPerformed(evt);
            }
        });

        visit_panel.add(visit_check, java.awt.BorderLayout.CENTER);

        visit_button.setText("Edit");
        visit_button.setEnabled(false);
        visit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	visit_buttonActionPerformed(evt);
            }
        });

        visit_panel.add(visit_button, java.awt.BorderLayout.EAST);

        action_allowance_panel.add(visit_panel);
        
        goto_panel.setLayout(new java.awt.BorderLayout());

        goto_check.setText("Go to");
        goto_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goto_checkActionPerformed(evt);
            }
        });

        goto_panel.add(goto_check, java.awt.BorderLayout.CENTER);

        goto_button.setText("Edit");
        goto_button.setEnabled(false);
        goto_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goto_buttonActionPerformed(evt);
            }
        });

        goto_panel.add(goto_button, java.awt.BorderLayout.EAST);

        action_allowance_panel.add(goto_panel);

        allowance_panel.add(action_allowance_panel);

        position_stamina_allowance_panel.add(allowance_panel, java.awt.BorderLayout.SOUTH);

        main_panel.add(position_stamina_allowance_panel, java.awt.BorderLayout.CENTER);

        death_panel.setLayout(new java.awt.BorderLayout());

        death_panel.setBorder(new javax.swing.border.TitledBorder("Death time probability distribution"));
        death_button.setText("Edit");
        death_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                death_buttonActionPerformed(evt);
            }
        });

        death_panel.add(death_button, java.awt.BorderLayout.EAST);

        death_combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Uniform", "Empirical", "Normal", "Specific time" }));
        death_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                death_comboActionPerformed(evt);
            }
        });

        death_panel.add(death_combo, java.awt.BorderLayout.CENTER);

        main_panel.add(death_panel, java.awt.BorderLayout.SOUTH);

        add(main_panel, java.awt.BorderLayout.NORTH);
    }//GEN-END:initComponents 
    
    /** Complements the initiation of the components of the GUI.
     * 
     *  @param owner The GUI that called this one.
     *  @param agent The Agent object to be configured.
     *  @param graph The graph of the patrolling simulation. */
    public void initComponents2(JDialog owner, Agent agent, Graph graph) {
    	this.agent = agent;
    	this.graph = graph;
    	this.owner = owner;
    	
    	this.object_id_field.setText(this.agent.getObjectId());
    	this.label_field.setText(this.agent.getLabel());
    	
    	Vertex[] vertexes = this.graph.getVertexes();
    	int agent_vertex_index = 0;
    	for(int i = 0; i < vertexes.length; i++) {
    		this.vertex_combo.addItem(vertexes[i].getObjectId());
    		if(vertexes[i].equals(this.agent.getVertex()))
    			agent_vertex_index = i + 1;
    	}
    	this.vertex_combo.setSelectedIndex(agent_vertex_index);
    	
    	Edge[] edges = this.agent.getVertex().getEdges();
    	int agent_edge_index = 0;
    	for(int i = 0; i < edges.length; i++)
    		if(edges[i].equals(this.agent.getEdge()))
    			agent_edge_index = i + 1;
    	
    	this.edge_combo.setSelectedIndex(agent_edge_index);
    	
    	this.stamina_field.setText(String.valueOf(this.agent.getStamina()));
    	this.max_stamina_field.setText(String.valueOf(this.agent.getMax_stamina()));
    	
    	PerceptionPermission[] allowed_permissions = this.agent.getAllowedPerceptions();
    	for(int i = 0; i < allowed_permissions.length; i++)
    		switch(allowed_permissions[i].getPerception_type()) {
    			case PerceptionTypes.AGENTS_PERCEPTION: {
    				this.agent_check.setSelected(true);
    				this.agent_button.setEnabled(true);
    				this.agent_perception_permission = allowed_permissions[i];
    				break;
    			}
    			case PerceptionTypes.BROADCAST_PERCEPTION: {
    				this.broadcast_perception_check.setSelected(true);
    				this.broadcast_perception_button.setEnabled(true);
    				this.broadcast_perception_permission = allowed_permissions[i];
    				break;
    			}
    			case PerceptionTypes.GRAPH_PERCEPTION: {
    				this.graph_check.setSelected(true);
    				this.graph_button.setEnabled(true);
    				this.graph_perception_permission = allowed_permissions[i];
    				break;
    			}
    			case PerceptionTypes.STIGMAS_PERCEPTION: {
    				this.stigma_check.setSelected(true);
    				this.stigma_button.setEnabled(true);
    				this.stigma_perception_permission = allowed_permissions[i];
    				break;
    			}
    		}
    	
    	ActionPermission[] allowed_actions = this.agent.getAllowedActions();
    	for(int i = 0; i < allowed_actions.length; i++)
    		switch(allowed_actions[i].getAction_type()) {
    			case ActionTypes.BROADCAST_ACTION: {
    				this.broadcast_action_check.setSelected(true);
    				this.broadcast_action_button.setEnabled(true);
    				this.broadcast_action_permission = allowed_actions[i];
    				break;
    			}
    			case ActionTypes.GOTO_ACTION: {
    				this.goto_check.setSelected(true);
    				this.goto_button.setEnabled(true);
    				this.goto_action_permission = allowed_actions[i];
    				break;
    			}
    			case ActionTypes.RECHARGE_ACTION: {
    				this.recharge_check.setSelected(true);
    				this.recharge_button.setEnabled(true);
    				this.recharge_action_permission = allowed_actions[i];
    				break;
    			}
    			case ActionTypes.STIGMATIZE_ACTION: {
    				this.stigmatize_check.setSelected(true);
    				this.stigmatize_button.setEnabled(true);
    				this.stigmatize_action_permission = allowed_actions[i];
    				break;
    			}
    			case ActionTypes.VISIT_ACTION: {
    				this.visit_check.setSelected(true);
    				this.visit_button.setEnabled(true);
    				this.visit_action_permission = allowed_actions[i];
    				break;
    			}
    		}
    	
    	if(this.agent instanceof SeasonalAgent) {
    		this.death_tpd = ((SeasonalAgent) this.agent).getDeathTPD();
    		if(this.death_tpd == null) {
    			this.death_combo.setSelectedIndex(0);
    			this.death_button.setEnabled(false);
    		}
    		else if(this.death_tpd instanceof UniformEventTimeProbabilityDistribution) {
    			this.death_combo.setSelectedIndex(1);
    			this.death_button.setEnabled(true);
    		}
    		else if(this.death_tpd instanceof EmpiricalEventTimeProbabilityDistribution) {
    			this.death_combo.setSelectedIndex(2);
    			this.death_button.setEnabled(true);
    		}
    		else if(this.death_tpd instanceof NormalEventTimeProbabilityDistribution) {
    			this.death_combo.setSelectedIndex(2);
    			this.death_button.setEnabled(true);
    		}
    		else {
    			this.death_combo.setSelectedIndex(3);
    			this.death_button.setEnabled(true);
    		}
    	}
    	else this.death_panel.setVisible(false);    	
    }
    
    /** Executed when the depth_combo object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void death_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_death_comboActionPerformed
    	if(this.last_death_combo_index != this.death_combo.getSelectedIndex()) {
    		this.last_death_combo_index = this.death_combo.getSelectedIndex();
    		
    		if(this.death_combo.getSelectedIndex() == 0)
        		this.death_button.setEnabled(false);
        	else {
        		this.death_button.setEnabled(true);
        		
        		if(this.death_combo.getSelectedIndex() == 1)
        			this.death_gui = new EventTimeProbabilityDistributionGUI(this.owner, new UniformEventTimeProbabilityDistribution((int) System.currentTimeMillis(), 0));
        		else if(this.death_combo.getSelectedIndex() == 2) {
        			double[] ditribution = {1};
        			this.death_gui = new EventTimeProbabilityDistributionGUI(this.owner, new EmpiricalEventTimeProbabilityDistribution((int) System.currentTimeMillis(), ditribution));
        		}
        		else if(this.death_combo.getSelectedIndex() == 3)
        			this.death_gui = new EventTimeProbabilityDistributionGUI(this.owner, new NormalEventTimeProbabilityDistribution((int) System.currentTimeMillis(), 0, 0));
        		else
        			this.death_gui = new EventTimeProbabilityDistributionGUI(this.owner, new SpecificEventTimeProbabilityDistribution((int) System.currentTimeMillis(), 0, 0));
        		
        		this.death_gui.setVisible(true);
        		EventTimeProbabilityDistribution chosen_death_tpd = this.death_gui.getETPD();    		
        		if(chosen_death_tpd == null) {
        			if(this.death_tpd == null) {
            			this.death_combo.setSelectedIndex(0);
            			this.death_button.setEnabled(false);
            		}
            		else if(this.death_tpd instanceof UniformEventTimeProbabilityDistribution) {
            			this.death_combo.setSelectedIndex(1);
            			this.death_button.setEnabled(true);
            		}        			
            		else if(this.death_tpd instanceof EmpiricalEventTimeProbabilityDistribution) {
            			this.death_combo.setSelectedIndex(2);
            			this.death_button.setEnabled(true);
            		}
            		else if(this.death_tpd instanceof NormalEventTimeProbabilityDistribution) {
            			this.death_combo.setSelectedIndex(3);
            			this.death_button.setEnabled(true);
            		}
            		else {
            			this.death_combo.setSelectedIndex(4);
            			this.death_button.setEnabled(true);
            		}
        		}
        		else this.death_tpd = chosen_death_tpd;
        	}
    	}
    }//GEN-LAST:event_death_comboActionPerformed
    
    /** Executed when the death_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void death_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_death_buttonActionPerformed
    	this.death_gui = new EventTimeProbabilityDistributionGUI(this.owner, this.death_tpd);
    	this.death_gui.setVisible(true);
    	EventTimeProbabilityDistribution chosen_death_tpd = this.death_gui.getETPD();		
		if(chosen_death_tpd == null) {
			if(this.death_tpd == null) {
    			this.death_combo.setSelectedIndex(0);
    			this.death_button.setEnabled(false);
    		}
    		else if(this.death_tpd instanceof UniformEventTimeProbabilityDistribution) {
    			this.death_combo.setSelectedIndex(1);
    			this.death_button.setEnabled(true);
    		}
    		else if(this.death_tpd instanceof EmpiricalEventTimeProbabilityDistribution) {
    			this.death_combo.setSelectedIndex(2);
    			this.death_button.setEnabled(true);
    		}
    		else if(this.death_tpd instanceof NormalEventTimeProbabilityDistribution) {
    			this.death_combo.setSelectedIndex(3);
    			this.death_button.setEnabled(true);
    		}
    		else {
    			this.death_combo.setSelectedIndex(4);
    			this.death_button.setEnabled(true);
    		}
		}
		else this.death_tpd = chosen_death_tpd;
    }//GEN-LAST:event_death_buttonActionPerformed

    /** Executed when the visit_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void visit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visit_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.visit_action_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.visit_action_permission = (ActionPermission) permission;
    }//GEN-LAST:event_visit_buttonActionPerformed
    
    /** Executed when the stigmatize_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void stigmatize_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stigmatize_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.stigmatize_action_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.stigmatize_action_permission = (ActionPermission) permission;
    }//GEN-LAST:event_stigmatize_buttonActionPerformed
    
    /** Executed when the recharge_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void recharge_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recharge_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.recharge_action_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.recharge_action_permission = (ActionPermission) permission;
    }//GEN-LAST:event_recharge_buttonActionPerformed
    
    /** Executed when the goto_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void goto_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goto_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.goto_action_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.goto_action_permission = (ActionPermission) permission;
    }//GEN-LAST:event_goto_buttonActionPerformed
    
    /** Executed when the broadcast_action_button is pressed.
     *  Generated by NetBeans IDE 3.6. */    
    private void broadcast_action_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broadcast_action_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.broadcast_action_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.broadcast_action_permission = (ActionPermission) permission;
    }//GEN-LAST:event_broadcast_action_buttonActionPerformed
    
    /** Executed when the broadcast_perception_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void broadcast_perception_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broadcast_perception_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.broadcast_perception_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.broadcast_perception_permission = (PerceptionPermission) permission;
    }//GEN-LAST:event_broadcast_perception_buttonActionPerformed
    
    /** Executed when the stigma_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void stigma_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stigma_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.stigma_perception_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.stigma_perception_permission = (PerceptionPermission) permission;
    }//GEN-LAST:event_stigma_buttonActionPerformed
    
    /** Executed when the graph_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void graph_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graph_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.graph_perception_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.graph_perception_permission = (PerceptionPermission) permission;
    }//GEN-LAST:event_graph_buttonActionPerformed
    
    /** Executed when the agent_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void agent_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agent_buttonActionPerformed
    	this.permission_gui = new PermissionGUI(this.owner, this.agent_perception_permission);
        this.permission_gui.setVisible(true);
        
        Permission permission = this.permission_gui.getPermission();
        if(permission != null)
        	this.agent_perception_permission = (PerceptionPermission) permission;
    }//GEN-LAST:event_agent_buttonActionPerformed
    
    /** Executed when the goto_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void goto_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goto_checkActionPerformed
    	if(this.goto_check.isSelected()) {
    		if(this.goto_action_permission == null)
    			this.goto_action_permission = new ActionPermission(null, ActionTypes.GOTO_ACTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.goto_action_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.goto_action_permission = (ActionPermission) permission;
            	this.goto_button.setEnabled(true);
            }
            else {
            	this.goto_check.setSelected(false);
            	this.goto_button.setEnabled(false);
            }
        }
        else this.goto_button.setEnabled(false);
    }//GEN-LAST:event_goto_checkActionPerformed
    
    /** Executed when the broadcast_action_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void broadcast_action_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broadcast_action_checkActionPerformed
    	if(this.broadcast_action_check.isSelected()) {
    		if(this.broadcast_action_permission == null)
    			this.broadcast_action_permission = new ActionPermission(null, ActionTypes.BROADCAST_ACTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.broadcast_action_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.broadcast_action_permission = (ActionPermission) permission;
            	this.broadcast_action_button.setEnabled(true);
            }
            else {
            	this.broadcast_action_check.setSelected(false);
            	this.broadcast_action_button.setEnabled(false);
            }
        }
        else this.broadcast_action_button.setEnabled(false);
    }//GEN-LAST:event_broadcast_action_checkActionPerformed
    
    /** Executed when the recharge_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void recharge_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recharge_checkActionPerformed
    	if(this.recharge_check.isSelected()) {
    		if(this.recharge_action_permission == null)
    			this.recharge_action_permission = new ActionPermission(null, ActionTypes.RECHARGE_ACTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.recharge_action_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.recharge_action_permission = (ActionPermission) permission;
            	this.recharge_button.setEnabled(true);
            }
            else {
            	this.recharge_check.setSelected(false);
            	this.recharge_button.setEnabled(false);
            }
        }
        else this.recharge_button.setEnabled(false);
    }//GEN-LAST:event_recharge_checkActionPerformed
    
    /** Executed when the stigmatize_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void stigmatize_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stigmatize_checkActionPerformed
    	if(this.stigmatize_check.isSelected()) {
    		if(this.stigmatize_action_permission == null)
    			this.stigmatize_action_permission = new ActionPermission(null, ActionTypes.STIGMATIZE_ACTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.stigmatize_action_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.stigmatize_action_permission = (ActionPermission) permission;
            	this.stigmatize_button.setEnabled(true);
            }
            else {
            	this.stigmatize_check.setSelected(false);
            	this.stigmatize_button.setEnabled(false);
            }
        }
        else this.stigmatize_button.setEnabled(false);
    }//GEN-LAST:event_stigmatize_checkActionPerformed
    
    /** Executed when the visit_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void visit_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visit_checkActionPerformed
    	if(this.visit_check.isSelected()) {
    		if(this.visit_action_permission == null)
    			this.visit_action_permission = new ActionPermission(null, ActionTypes.VISIT_ACTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.visit_action_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.visit_action_permission = (ActionPermission) permission;
            	this.visit_button.setEnabled(true);
            }
            else {
            	this.visit_check.setSelected(false);
            	this.visit_button.setEnabled(false);
            }
        }
        else this.visit_button.setEnabled(false);
    }//GEN-LAST:event_visit_checkActionPerformed    
    
    /** Executed when the stigma_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void stigma_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stigma_checkActionPerformed
    	if(this.stigma_check.isSelected()) {
    		if(this.stigma_perception_permission == null)
    			this.stigma_perception_permission = new PerceptionPermission(null, PerceptionTypes.STIGMAS_PERCEPTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.stigma_perception_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.stigma_perception_permission = (PerceptionPermission) permission;
            	this.stigma_button.setEnabled(true);
            }
            else {
            	this.stigma_check.setSelected(false);
            	this.stigma_button.setEnabled(false);
            }
        }
        else this.stigma_button.setEnabled(false);
    }//GEN-LAST:event_stigma_checkActionPerformed
    
    /** Executed when the graph_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void graph_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graph_checkActionPerformed
    	if(this.graph_check.isSelected()) {
    		if(this.graph_perception_permission == null)
    			this.graph_perception_permission = new PerceptionPermission(null, PerceptionTypes.GRAPH_PERCEPTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.graph_perception_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.graph_perception_permission = (PerceptionPermission) permission;
            	this.graph_button.setEnabled(true);
            }
            else {
            	this.graph_check.setSelected(false);
            	this.graph_button.setEnabled(false);
            }
        }
        else this.graph_button.setEnabled(false);
    }//GEN-LAST:event_graph_checkActionPerformed
    
    /** Executed when the agent_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void agent_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agent_checkActionPerformed
    	if(this.agent_check.isSelected()) {
    		if(this.agent_perception_permission == null)
    			this.agent_perception_permission = new PerceptionPermission(null, PerceptionTypes.AGENTS_PERCEPTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.agent_perception_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.agent_perception_permission = (PerceptionPermission) permission;
            	this.agent_button.setEnabled(true);
            }
            else {
            	this.agent_check.setSelected(false);
            	this.agent_button.setEnabled(false);
            }
        }
        else this.agent_button.setEnabled(false);
    }//GEN-LAST:event_agent_checkActionPerformed
    
    /** Executed when the broadcast_perception_check object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void broadcast_perception_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broadcast_perception_checkActionPerformed
    	if(this.broadcast_perception_check.isSelected()) {
    		if(this.broadcast_perception_permission == null)
    			this.broadcast_perception_permission = new PerceptionPermission(null, PerceptionTypes.BROADCAST_PERCEPTION);
    		
        	this.permission_gui = new PermissionGUI(this.owner, this.broadcast_perception_permission);
            this.permission_gui.setVisible(true);
            
            Permission permission = this.permission_gui.getPermission();
            if(permission != null) {
            	this.broadcast_perception_permission = (PerceptionPermission) permission;
            	this.broadcast_perception_button.setEnabled(true);
            }
            else {
            	this.broadcast_perception_check.setSelected(false);
            	this.broadcast_perception_button.setEnabled(false);
            }
        }
        else this.broadcast_perception_button.setEnabled(false);
    }//GEN-LAST:event_broadcast_perception_checkActionPerformed

    /** Executed when the max_stamina_field object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void max_stamina_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_max_stamina_fieldKeyReleased
    	String str_max_stamina = this.max_stamina_field.getText().trim();      
        if(str_max_stamina.length() > 0)
            try {
                double max_stamina = Double.parseDouble(str_max_stamina);
                if(max_stamina < 0)
                    throw new NumberFormatException();                
            }
            catch(NumberFormatException e) {
                if(str_max_stamina.charAt(str_max_stamina.length() - 1) != '.') {
                    JOptionPane.showMessageDialog(this, "The maximum stamina value must be a real non-negative number.", "Stamina value error.", JOptionPane.ERROR_MESSAGE);
                    this.max_stamina_field.setText("1");
                }
            }
    }//GEN-LAST:event_max_stamina_fieldKeyReleased
    
    /** Executed when the stamina_field object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void stamina_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stamina_fieldKeyReleased
    	String str_stamina = this.stamina_field.getText().trim();      
        if(str_stamina.length() > 0)
            try {
                double stamina = Double.parseDouble(str_stamina);
                if(stamina < 0)
                    throw new NumberFormatException();                
            }
            catch(NumberFormatException e) {
                if(str_stamina.charAt(str_stamina.length() - 1) != '.') {
                    JOptionPane.showMessageDialog(this, "The stamina value must be a real non-negative number.", "Stamina value error.", JOptionPane.ERROR_MESSAGE);
                    this.stamina_field.setText("1");
                }
            }
    }//GEN-LAST:event_stamina_fieldKeyReleased
    
    /** Executed when the elapsed_length_field object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void elapsed_length_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_elapsed_length_fieldMouseReleased
    	String str_length = this.elapsed_length_field.getText().trim();      
        if(str_length.length() > 0) {
            double elapsed_length = 0;
        
        	try {
                elapsed_length = Double.parseDouble(str_length);
                if(elapsed_length < 0 || elapsed_length > this.max_elapsed_length)
                    throw new NumberFormatException();                
            }
            catch(NumberFormatException e) {
            	if(elapsed_length > this.max_elapsed_length) {
            		JOptionPane.showMessageDialog(this, "The maximum value of the elapsed length is " + String.valueOf(this.max_elapsed_length), "Value error", JOptionPane.ERROR_MESSAGE);
            		this.elapsed_length_field.setText("0");
            	}
            	else if(str_length.charAt(str_length.length() - 1) != '.') {
            		JOptionPane.showMessageDialog(this, "The elapsed length value must be a real non-negative number.", "Value error.", JOptionPane.ERROR_MESSAGE);                    
                	this.elapsed_length_field.setText("0");
                }
            }
        }
    }//GEN-LAST:event_elapsed_length_fieldKeyReleased
    
    /** Executed when the edge_combo object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void edge_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edge_comboActionPerformed
        if(this.edge_combo.getSelectedIndex() == 0) {
        	this.elapsed_length_field.setText("0");
        	this.elapsed_length_field.setEnabled(false);
        }
        else {
        	this.elapsed_length_field.setEnabled(true);
        	String edge_id = (String) this.edge_combo.getSelectedItem();
        	
        	Edge[] edges = this.graph.getEdges();
        	for(int i = 0; i < edges.length; i++)
        		if(edges[i].getObjectId().equals(edge_id)) {
        			this.max_elapsed_length = edges[i].getLength();
        			this.elapsed_length_field.setToolTipText("Max value: " + String.valueOf(this.max_elapsed_length));
        			return;
        		}
        }
    }//GEN-LAST:event_edge_comboActionPerformed
    
    /** Executed when the vertex_combo object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void vertex_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertex_comboActionPerformed
        if(this.vertex_combo.getSelectedIndex() == 0) {
        	this.edge_combo.setSelectedIndex(0);
        	this.edge_combo.setEnabled(false);
        	this.elapsed_length_field.setText("0");
        	this.elapsed_length_field.setEnabled(false);
        }
        else {
        	this.edge_combo.removeAllItems();
        	this.edge_combo.addItem("Null");
        	
        	String vertex_id = (String) this.vertex_combo.getSelectedItem();
        	Vertex[] vertexes = this.graph.getVertexes();
        	for(int i = 0; i < vertexes.length; i++)
        		if(vertexes[i].getObjectId().equals(vertex_id)) {
        			Edge[] edges = vertexes[i].getEdges();
        			for(int j = 0; j < edges.length; j++)
        				this.edge_combo.addItem(edges[j].getObjectId());
        			
        			break;
        		}
        	
        	this.edge_combo.setSelectedIndex(0);
        	this.edge_combo.setEnabled(true);
        	this.elapsed_length_field.setText("0");
        	this.elapsed_length_field.setEnabled(false);
        }
    }//GEN-LAST:event_vertex_comboActionPerformed
    
    /** Executed when the label_field object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void label_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_label_fieldActionPerformed
    	String agent_id = this.label_field.getText().trim();
    	
    	if(agent_id.length() == 0)
    		agent_id = "object";
    	
		String id_part = null;
        StringTokenizer tokenizer = new StringTokenizer(this.object_id_field.getText().trim(), "@", false);
        try {
        	tokenizer.nextToken();
            id_part = tokenizer.nextToken();
        }
        catch(NoSuchElementException e) {
        	id_part = this.object_id_field.getText().trim();        	
        }
        
        this.object_id_field.setText(agent_id + "@" + id_part);
    }//GEN-LAST:event_label_fieldKeyReleased
    
    /** Returns the agent configured by the GUI.
     * 
     *  @return The Agent object configured by the GUI. */
    public Agent getAgent() {
    	String object_id = this.object_id_field.getText().trim();
    	String label = this.label_field.getText().trim();
    	
    	Vertex vertex = null;    	
    	String vertex_id = (String) this.vertex_combo.getSelectedItem();
    	if(this.vertex_combo.getSelectedIndex() == 0) {
    		int random_index = 0;
    		while(random_index == 0)
    			random_index = (int) (Math.random() * (this.vertex_combo.getItemCount()));
    		
    		vertex_id = (String) this.vertex_combo.getItemAt(random_index);    		    		    		
    	}
    	Vertex[] vertexes = this.graph.getVertexes();
		for(int i = 0; i < vertexes.length; i++)
			if(vertexes[i].getObjectId().equals(vertex_id)) {
				vertex = vertexes[i];
				break;
			}
		
		Edge edge = null;
		double elapsed_length = 0;
		if(this.edge_combo.getSelectedIndex() > 0) {
			String edge_id = (String) this.edge_combo.getSelectedItem();
			Edge[] edges = vertex.getEdges();
			for(int i = 0; i < edges.length; i++)
				if(edges[i].getObjectId().equals(edge_id)) {
					edge = edges[i];
					break;
				}
			
			try {
				elapsed_length = Double.parseDouble(this.elapsed_length_field.getText().trim());				
			}
			catch(NumberFormatException e) {
				String str_value = this.elapsed_length_field.getText().trim();
				str_value.substring(0, str_value.length() - 1);
				elapsed_length = Double.parseDouble(str_value);
			}
		}
		
		double stamina = 0;
		try {
			stamina = Double.parseDouble(this.stamina_field.getText().trim());				
		}
		catch(NumberFormatException e) {
			String str_value = this.stamina_field.getText().trim();
			str_value.substring(0, str_value.length() - 1);
			stamina = Double.parseDouble(str_value);
		}
		
		double max_stamina = 0;
		try {
			max_stamina = Double.parseDouble(this.max_stamina_field.getText().trim());
		}
		catch(NumberFormatException e) {
			String str_value = this.max_stamina_field.getText().trim();
			str_value.substring(0, str_value.length() - 1);
			max_stamina = Double.parseDouble(str_value);
		}
		
		if(max_stamina < stamina) {
			JOptionPane.showMessageDialog(this, "The stamina value cannot be bigger than the maximum possible stamina value. Its value will be reset.", "Stamina value error", JOptionPane.ERROR_MESSAGE);
			stamina = max_stamina;
			this.stamina_field.setText(String.valueOf(stamina));
		}
		
		LinkedList<PerceptionPermission> allowed_perceptions_list = new LinkedList<PerceptionPermission>();
		if(this.agent_check.isSelected())
			allowed_perceptions_list.add(this.agent_perception_permission);
		if(this.broadcast_perception_check.isSelected())
			allowed_perceptions_list.add(this.broadcast_perception_permission);
		if(this.graph_check.isSelected())
			allowed_perceptions_list.add(this.graph_perception_permission);
		if(this.stigma_check.isSelected())
			allowed_perceptions_list.add(this.stigma_perception_permission);
		PerceptionPermission[] allowed_perceptions = new PerceptionPermission[allowed_perceptions_list.size()];
		for(int i = 0; i < allowed_perceptions.length; i++)
			allowed_perceptions[i] = allowed_perceptions_list.get(i);
		
		LinkedList<ActionPermission> allowed_actions_list = new LinkedList<ActionPermission>();
		if(this.broadcast_action_check.isSelected())
			allowed_actions_list.add(this.broadcast_action_permission);
		if(this.goto_check.isSelected())
			allowed_actions_list.add(this.goto_action_permission);
		if(this.recharge_check.isSelected())
			allowed_actions_list.add(this.recharge_action_permission);		
		if(this.stigmatize_check.isSelected())
			allowed_actions_list.add(this.stigmatize_action_permission);
		if(this.visit_check.isSelected())
			allowed_actions_list.add(this.visit_action_permission);
		ActionPermission[] allowed_actions = new ActionPermission[allowed_actions_list.size()];
		for(int i = 0; i < allowed_actions.length; i++)
			allowed_actions[i] = allowed_actions_list.get(i);
		
		Agent answer = null;
		if(this.agent instanceof PerpetualAgent)
			answer = new PerpetualAgent(label, vertex, allowed_perceptions, allowed_actions);
		else {
			if(this.death_combo.getSelectedIndex() != 0)
				answer = new SeasonalAgent(label, vertex, allowed_perceptions, allowed_actions, this.death_tpd);
			else
				answer = new SeasonalAgent(label, vertex, allowed_perceptions, allowed_actions, null);
		}
		
		answer.setObjectId(object_id);
		
		if(edge != null)
			answer.setEdge(edge, elapsed_length);
		
		answer.setStamina(stamina);
		answer.setMax_stamina(max_stamina);
		
    	return answer;
    }
    
    /* Attributes. */
    // added manually
    private Agent agent;
    private Graph graph;
    private PerceptionPermission agent_perception_permission;
    private PerceptionPermission broadcast_perception_permission;
    private PerceptionPermission graph_perception_permission;
    private PerceptionPermission stigma_perception_permission;
    private ActionPermission broadcast_action_permission;
    private ActionPermission goto_action_permission;
    private ActionPermission recharge_action_permission;
    private ActionPermission stigmatize_action_permission;
    private ActionPermission visit_action_permission;
    private EventTimeProbabilityDistribution death_tpd;
    private EventTimeProbabilityDistributionGUI death_gui;
    private PermissionGUI permission_gui;
    private double max_elapsed_length = 0;
    private JDialog owner;
    private int last_death_combo_index;
    
    // added by Eclipse
    private static final long serialVersionUID = -3351365950030332742L;
    
    // added by NetBeans IDE 3.6
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel action_allowance_panel;
    private javax.swing.JButton agent_button;
    private javax.swing.JCheckBox agent_check;
    private javax.swing.JPanel agent_perception_panel;    
    private javax.swing.JPanel agent_stamina_panel;        
    private javax.swing.JPanel allowance_panel;
    private javax.swing.JButton broadcast_perception_button;
    private javax.swing.JCheckBox broadcast_perception_check;
    private javax.swing.JPanel broadcast_perception_panel;    
    private javax.swing.JButton broadcast_action_button;
    private javax.swing.JCheckBox broadcast_action_check;
    private javax.swing.JPanel broadcast_action_panel;    
    private javax.swing.JButton death_button;
    private javax.swing.JComboBox death_combo;
    private javax.swing.JPanel death_panel;
    private javax.swing.JComboBox edge_combo;
    private javax.swing.JLabel edge_label;
    private javax.swing.JPanel edge_panel;
    private javax.swing.JTextField elapsed_length_field;
    private javax.swing.JPanel elapsed_length_panel;
    private javax.swing.JButton goto_button;
    private javax.swing.JCheckBox goto_check;
    private javax.swing.JPanel goto_panel;
    private javax.swing.JButton graph_button;
    private javax.swing.JCheckBox graph_check;
    private javax.swing.JPanel graph_perception_panel;
    private javax.swing.JPanel identification_panel;
    private javax.swing.JLabel elapsed_length_label;
    private javax.swing.JTextField label_field;
    private javax.swing.JLabel label_label;
    private javax.swing.JPanel label_panel;
    private javax.swing.JPanel main_panel;    
    private javax.swing.JTextField max_stamina_field;
    private javax.swing.JPanel max_stamina_internal_panel;
    private javax.swing.JLabel max_stamina_label;    
    private javax.swing.JTextField object_id_field;
    private javax.swing.JLabel object_id_label;
    private javax.swing.JPanel object_id_panel;
    private javax.swing.JPanel perception_allowance_panel;
    private javax.swing.JPanel position_panel;
    private javax.swing.JPanel position_stamina_allowance_panel;    
    private javax.swing.JButton recharge_button;
    private javax.swing.JCheckBox recharge_check;
    private javax.swing.JPanel recharge_panel;    
    private javax.swing.JTextField stamina_field;
    private javax.swing.JPanel stamina_internal_panel;
    private javax.swing.JLabel stamina_label;    
    private javax.swing.JButton stigma_button;
    private javax.swing.JCheckBox stigma_check;
    private javax.swing.JPanel stigma_perception_panel;
    private javax.swing.JButton stigmatize_button;
    private javax.swing.JCheckBox stigmatize_check;
    private javax.swing.JPanel stigmatize_panel;
    private javax.swing.JComboBox vertex_combo;
    private javax.swing.JLabel vertex_label;
    private javax.swing.JPanel vertex_panel;
    private javax.swing.JButton visit_button;
    private javax.swing.JCheckBox visit_check;
    private javax.swing.JPanel visit_panel;
    // End of variables declaration//GEN-END:variables   
}