/* SpeedLimitationJPanel.java */

/* The package of this class. */
package limitation;

/* Imported classes and/or interfaces. */
import javax.swing.JOptionPane;
import model.limitation.Limitation;
import model.limitation.SpeedLimitation;

/**
 * Implements the GUI panel able to configure SpeedLimitation objects.
 * 
 * @see SpeedLimitation
 */
public class SpeedLimitationJPanel extends LimitationJPanel {
	/* Methods. */
	/**
	 * Constructor.
	 * 
	 * @param limitation
	 *            The SpeedLimitation object to be configured.
	 */
	public SpeedLimitationJPanel(SpeedLimitation limitation) {
		this.initComponents();
		this.initComponents(limitation);
	}

	/**
	 * Initiates the components of the GUI. Generated by NetBeans IDE 3.6.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		speed_panel = new javax.swing.JPanel();
		speed_label = new javax.swing.JLabel();
		speed_field = new javax.swing.JTextField();

		setLayout(new java.awt.BorderLayout());

		speed_panel.setLayout(new java.awt.BorderLayout());

		speed_label.setText("Speed value ");
		speed_panel.add(speed_label, java.awt.BorderLayout.WEST);

		speed_field.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		speed_field.setText("1");
		speed_field.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				speed_fieldKeyReleased(evt);
			}
		});

		speed_panel.add(speed_field, java.awt.BorderLayout.CENTER);

		add(speed_panel, java.awt.BorderLayout.NORTH);

	}// GEN-END:initComponents

	/**
	 * Complements the initiation of the components of the GUI.
	 * 
	 * @param limitation
	 *            The SpeedLimitation object to be configured.
	 */
	private void initComponents(SpeedLimitation limitation) {
		this.limitation = limitation;
		this.speed_field.setText(String.valueOf(this.limitation.getSpeed()));
	}

	/**
	 * Executed when the speed_field changes. Generated by NetBeans IDE 3.6.
	 */
	private void speed_fieldKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jTextField1KeyReleased
		String str_speed = this.speed_field.getText().trim();
		if (str_speed.length() > 0)
			try {
				double speed = Double.parseDouble(str_speed);
				if (speed < 0)
					throw new NumberFormatException();
			} catch (NumberFormatException e) {
				if (str_speed.charAt(str_speed.length() - 1) != '.') {
					JOptionPane
							.showMessageDialog(
									this,
									"The speed value must be a real non-negative number.",
									"Value error.", JOptionPane.ERROR_MESSAGE);
					this.speed_field.setText("1");
				}
			}
	}// GEN-LAST:event_jTextField1KeyReleased

	@Override
	public Limitation getLimitation() {
		try {
			double speed = Double
					.parseDouble(this.speed_field.getText().trim());

			if (speed < 0)
				throw new NumberFormatException();

			this.limitation = new SpeedLimitation(speed);
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this,
					"The speed value must be a real non-negative number.",
					"Value error.", JOptionPane.ERROR_MESSAGE);
			this.initComponents(this.limitation);
		}

		return this.limitation;
	}

	/* Attributes. */
	// added manually
	private SpeedLimitation limitation;

	// added by Eclipse
	private static final long serialVersionUID = 4362196024348503267L;

	// added by NetBeans IDE 3.6
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel speed_label;
	private javax.swing.JPanel speed_panel;
	private javax.swing.JTextField speed_field;
	// End of variables declaration//GEN-END:variables
}