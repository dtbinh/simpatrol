/* SocietyJPanel.java */

/* The package of this class. */
package society;

/* Imported classes and/or interfaces. */
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import agent.AgentGUI;
import model.agent.Agent;
import model.agent.ClosedSociety;
import model.agent.OpenSociety;
import model.agent.PerpetualAgent;
import model.agent.SeasonalAgent;
import model.agent.Society;
import model.graph.Graph;

/** Implements the GUI panel able to configure
 *  Society objects.
 *  
 *  @see Society */
public class SocietyJPanel extends javax.swing.JPanel {   
	/* Methods. */
    /** Constructor.
     * 
     *  @param owner The GUI that called this one.
     *  @param society The Society object to be configured.
     *  @param graph The graph of the patrolling simulation. */
    public SocietyJPanel(JDialog owner, Society society, Graph graph) {
        this.initComponents();
        this.initComponents2(owner, society, graph);
    }
    
    /** Initiates the components of the GUI.
     *  Generated by NetBeans IDE 3.6. */
    private void initComponents() {//GEN-BEGIN:initComponents
        identification_panel = new javax.swing.JPanel();
        id_panel = new javax.swing.JPanel();
        id_label = new javax.swing.JLabel();
        id_field = new javax.swing.JTextField();
        label_panel = new javax.swing.JPanel();
        label_label = new javax.swing.JLabel();
        label_field = new javax.swing.JTextField();
        agents_panel = new javax.swing.JPanel();
        agents_scroll = new javax.swing.JScrollPane();
        agents_table = new javax.swing.JTable();
        buttons_panel = new javax.swing.JPanel();
        buttons_internal_panel = new javax.swing.JPanel();
        add_button = new javax.swing.JButton();
        edit_button = new javax.swing.JButton();
        remove_button = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        identification_panel.setLayout(new java.awt.GridLayout(2, 0));

        identification_panel.setBorder(new javax.swing.border.TitledBorder("Identification"));
        id_panel.setLayout(new java.awt.BorderLayout());

        id_label.setText("Object ID ");
        id_panel.add(id_label, java.awt.BorderLayout.WEST);

        id_field.setEditable(false);
        id_panel.add(id_field, java.awt.BorderLayout.CENTER);

        identification_panel.add(id_panel);

        label_panel.setLayout(new java.awt.BorderLayout());

        label_label.setText("Label ");
        label_panel.add(label_label, java.awt.BorderLayout.WEST);

        label_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                label_fieldKeyReleased(evt);
            }
        });

        label_panel.add(label_field, java.awt.BorderLayout.CENTER);

        identification_panel.add(label_panel);

        add(identification_panel, java.awt.BorderLayout.NORTH);

        agents_panel.setLayout(new java.awt.BorderLayout());

        agents_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Agents"
            }
        ) {
            private static final long serialVersionUID = 3781204748015993454L;
			Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            @SuppressWarnings("unchecked")
			public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        agents_scroll.setViewportView(agents_table);

        agents_panel.add(agents_scroll, java.awt.BorderLayout.CENTER);

        buttons_panel.setLayout(new java.awt.BorderLayout());

        buttons_internal_panel.setLayout(new java.awt.GridLayout(3, 0));

        add_button.setText("Add agent");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        buttons_internal_panel.add(add_button);

        edit_button.setText("Edit agent");
        edit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_buttonActionPerformed(evt);
            }
        });

        buttons_internal_panel.add(edit_button);

        remove_button.setText("Remove agents");
        remove_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_buttonActionPerformed(evt);
            }
        });

        buttons_internal_panel.add(remove_button);

        buttons_panel.add(buttons_internal_panel, java.awt.BorderLayout.NORTH);

        agents_panel.add(buttons_panel, java.awt.BorderLayout.EAST);

        add(agents_panel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    /** Complements the initiation of the components of the GUI.
     * 
     *  @param owner The GUI that called this one.
     *  @param society The Society object to be configured.
     *  @param graph The graph of the patrolling simulation. */
    private void initComponents2(JDialog owner, Society society, Graph graph) {
    	this.owner = owner;
    	this.graph = graph;    	
    	this.agents = new LinkedList<Agent>();
    	
    	if(society instanceof ClosedSociety)
    		this.is_closed_society = true;
    	else
    		this.is_closed_society = false;
    	
    	this.id_field.setText(society.getObjectId());
    	this.label_field.setText(society.getLabel());
    	
    	Agent[] agents = society.getAgents();
    	for(int i = 0; i < agents.length; i++) {
    		String[] content = { agents[i].getObjectId() };
    		((DefaultTableModel) this.agents_table.getModel()).addRow(content);
    		
    		this.agents.add(agents[i]);
    	}
    }
    
    /** Executed when the remove_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void remove_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_buttonActionPerformed
    	DefaultTableModel table_model = (DefaultTableModel) this.agents_table.getModel();
    	
    	int selected_rows_count = this.agents_table.getSelectedRowCount();
    	int[] selected_rows = this.agents_table.getSelectedRows();
    	for(int i = 0; i < selected_rows_count; i++) {
    		String agent_id = (String) this.agents_table.getValueAt(selected_rows[i], 0);
    		for(int j = 0; j < this.agents.size(); j++)
    			if(this.agents.get(j).getObjectId().equals(agent_id)) {
    				this.agents.remove(j);
    				break;
    			}    		
    		
    		table_model.removeRow(selected_rows[i]);
    		
    		for(int j = i + 1; j < selected_rows_count; j++)
    			selected_rows[j]--;
       }
    }//GEN-LAST:event_remove_buttonActionPerformed
    
    /** Executed when the edit_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void edit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_buttonActionPerformed
        if(this.agents_table.getSelectedRowCount() == 1) {
        	int selected_row = this.agents_table.getSelectedRow();        	
        	String agent_id = (String) this.agents_table.getValueAt(selected_row, 0);
        	
        	for(int i = 0; i < this.agents.size(); i++)
        		if(this.agents.get(i).getObjectId().equals(agent_id)) {
        			this.agent_gui = new AgentGUI(this.owner, this.agents.get(i), this.graph);
        			this.agent_gui.setVisible(true);
        			
        			Agent[] obtained_agents = this.agent_gui.getAgents();
        			if(obtained_agents.length > 0) {
        				DefaultTableModel table_model = (DefaultTableModel) this.agents_table.getModel();
        				
        				table_model.removeRow(selected_row);
        				this.agents.remove(this.agents.get(i));
        				
        				for(int j = 0; j < obtained_agents.length; j++) {
        					String[] content = { obtained_agents[j].getObjectId() };
        					table_model.addRow(content);
        					
        					this.agents.add(obtained_agents[j]);
        				}
        			}
        			
        			break;
        		}
        }
        else if(this.agents_table.getSelectedRowCount() > 1) {
        	JOptionPane.showMessageDialog(this, "Please select only one agent.", "Selection error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_edit_buttonActionPerformed
    
    /** Executed when the add_button is pressed.
     *  Generated by NetBeans IDE 3.6. */
    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        Agent added_agent = null;
        
    	if(this.is_closed_society)
    		added_agent = new PerpetualAgent("", this.graph.getVertexes()[0], null, null);
    	else
    		added_agent = new SeasonalAgent("", this.graph.getVertexes()[0], null, null, null);
    	
    	added_agent.setObjectId(added_agent.getClass().getName() + "@" + Integer.toHexString(added_agent.hashCode()) + "#" + Long.toHexString(System.currentTimeMillis()));
    	
    	this.agent_gui = new AgentGUI(this.owner, added_agent, this.graph);
		this.agent_gui.setVisible(true);
		
		Agent[] obtained_agents = this.agent_gui.getAgents();
		for(int i = 0; i < obtained_agents.length; i++) {
			String[] content = { obtained_agents[i].getObjectId() };
			((DefaultTableModel) this.agents_table.getModel()).addRow(content);
			
			this.agents.add(obtained_agents[i]);
		}
    }//GEN-LAST:event_add_buttonActionPerformed
    
    /** Executed when the label_field object changes.
     *  Generated by NetBeans IDE 3.6. */
    private void label_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_label_fieldKeyReleased
    	String society_id = this.label_field.getText().trim();
    	
    	if(society_id.length() == 0)
    		society_id = "society";
    	
		String id_part = null;
        StringTokenizer tokenizer = new StringTokenizer(this.id_field.getText().trim(), "@", false);
        try {
        	tokenizer.nextToken();
            id_part = tokenizer.nextToken();
        }
        catch(NoSuchElementException e) {
        	id_part = this.id_field.getText().trim();        	
        }
        
        this.id_field.setText(society_id + "@" + id_part);
    }//GEN-LAST:event_label_fieldKeyReleased
    
    /** Returns the modified society.
     * 
     *  @return The society configured by this GUI. */
    public Society getSociety() {
    	Society answer = null;
    	
    	if(this.is_closed_society) {
    		PerpetualAgent[] perpetual_agents = new PerpetualAgent[this.agents.size()];
    		for(int i = 0; i < perpetual_agents.length; i++)
    			perpetual_agents[i] = (PerpetualAgent) this.agents.get(i);
    		
    		answer = new ClosedSociety(this.label_field.getText().trim(), perpetual_agents);
    	}
    	else {
    		SeasonalAgent[] seasonal_agents = new SeasonalAgent[this.agents.size()];
    		for(int i = 0; i < seasonal_agents.length; i++)
    			seasonal_agents[i] = (SeasonalAgent) this.agents.get(i);
    		
    		answer = new OpenSociety(this.label_field.getText().trim(), seasonal_agents);    		
    	}
    	
    	answer.setObjectId(this.id_field.getText().trim());
    	
    	return answer;
    }
    
    /* Attributes. */
    // added manually
    private JDialog owner;
    private boolean is_closed_society;
    private Graph graph;    
    private AgentGUI agent_gui;
    private LinkedList<Agent> agents;
    
    // added by Eclipse
	private static final long serialVersionUID = 2871384431165375650L;    
    
    // added by NetBeans IDE 3.6
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_button;
    private javax.swing.JPanel agents_panel;
    private javax.swing.JScrollPane agents_scroll;
    private javax.swing.JTable agents_table;
    private javax.swing.JPanel buttons_internal_panel;
    private javax.swing.JPanel buttons_panel;
    private javax.swing.JButton edit_button;
    private javax.swing.JTextField id_field;
    private javax.swing.JLabel id_label;
    private javax.swing.JPanel id_panel;
    private javax.swing.JPanel identification_panel;
    private javax.swing.JTextField label_field;
    private javax.swing.JLabel label_label;
    private javax.swing.JPanel label_panel;
    private javax.swing.JButton remove_button;
    // End of variables declaration//GEN-END:variables   
}