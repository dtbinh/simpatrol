package _tests;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.StringTokenizer;

import launchers.CrLauncher;
import launchers.GravLauncher;
import launchers.HpccLauncher;

import strategies.conscientious_reactiveIPC.ConscientiousReactiveClient;
import strategies.cycledIPC.CycledClient;


/**
 * Used to start and run the proper kind of strategy from a given configuration file. 
 * <br><br>
 * The configuration file should be named properly to indicate the strategy. The naming convention is
 * the same of the files generated by the tool "configuration generator".
 * 
 * @author Pablo A. Sampaio
 */
public class RunAgentsConfigFile {
	private static int NUM_TURNS = 3000;
	private static int PORT 	 = 5000;
	

	// todo: receive NUM_TURNS and PORT in parameters 1 and 2
	public static void main(String[] args) throws Exception {
		if (args.length == 0) {
			System.out.println("No configuration file was given!");
			return;
		}

		String logFileName = args[0] + ".log";
		File logFile = new File(logFileName);
		
		if (logFile.exists()) {
			System.out.printf("Configuration %s already exists!\nAborting...\n\n", args[0]);
			Thread.sleep(500);
			return;
		}

		FileOutputStream fileOut = (new FileOutputStream(logFile.getCanonicalFile().getParent() 
				+ "\\_summary.txt", true));

	    SimpleDateFormat ft = new SimpleDateFormat("hh:mm:ss");
		fileOut.write(("Experimento: " + args[0] + "\n").getBytes());
		fileOut.write(("Inicio: " + ft.format(new Date()) + "\n").getBytes());

		String algorithm = logFile.getName().split("-")[0];
		
		if (algorithm.startsWith("grav")) {
			runGravAgents(args[0], logFileName);
		
		} else if (algorithm.equals("hpcc")) {
			runHpccAgents(args[0], logFileName);
			
		} else if (algorithm.equals("cr")) {
			runCrAgents(args[0], logFileName);
			
		} else if (algorithm.equals("sc")) {
			runScAgents(args[0], logFileName);
			
		} else {
			System.out.println("Agente desconhecido!!!");
			Thread.sleep(5000);
			fileOut.close();
			return;
		}
			
		fileOut.write(("Termino: " + ft.format(new Date()) + "\n").getBytes());
		fileOut.write("\n".getBytes());
		
		fileOut.close();

		System.exit(0); //to stop any remaining thread
		
	}
	
	private static void runGravAgents(String configFile, String logFile) throws Exception {
		String gravParams = configFile.substring(configFile.indexOf('(')+1, configFile.indexOf(')'));
		StringTokenizer tokenizer = new StringTokenizer(gravParams, ",");

		String param1 = tokenizer.nextToken();
		String param2 = tokenizer.nextToken();
		String param3 = tokenizer.nextToken();
		String param4 = tokenizer.nextToken();
		
		String[] args = new String[]{
				"127.0.0.1", ""+PORT, 
				configFile,
				"-time", ""+NUM_TURNS,
				"-log", logFile,
				"-grav", param1, param2, param3, param4,
				"-ipc",
				//"-callback"
		};
		
		GravLauncher client;
		
		System.out.printf("STARTING SIMULATION WITH GRAV(%s, %s, %s, %s)...\n", param1, param2, param3, param4);	
		client = new GravLauncher(args);
		client.start();		
		System.out.println("SIMULATION STARTED!");	
		client.join();		
		System.out.println("SIMULATION FINISHED!");
	}

	private static void runHpccAgents(String configFile, String logFile) throws Exception {
		String[] args = new String[]{
				"127.0.0.1", ""+PORT, 
				configFile,
				"-time", ""+NUM_TURNS,
				"-log", logFile,
				"-ipc",
				//"-callback"
		};
		
		HpccLauncher client;
		
		System.out.printf("STARTING SIMULATION WITH HPCC...\n");
		client = new HpccLauncher(args);
		client.start();		
		System.out.println("SIMULATION STARTED!");	
		client.join();		
		System.out.println("SIMULATION FINISHED!");
	}

	private static void runCrAgents(String configFile, String logFile) throws Exception {
		String[] args = {
				"127.0.0.1",
				"5000",
				configFile,
				"-t", ""+NUM_TURNS,
				"-l", logFile,
			}; 
		
		ConscientiousReactiveClient client = new ConscientiousReactiveClient(args);
		
//		String[] args = new String[]{
//				"127.0.0.1", ""+PORT, 
//				configFile,
//				"-time", ""+NUM_TURNS,
//				"-log", logFile,
//				"-ipc"
//		};
//		
//		CrLauncher client = new CrLauncher(args); 
		
		System.out.printf("STARTING SIMULATION WITH CR...\n");
		client.start();		
		System.out.println("SIMULATION STARTED!");	
		client.join();		
		System.out.println("SIMULATION FINISHED!");
	}

	private static void runScAgents(String configFile, String logFileName) throws Exception {
		String[] args = {
				"127.0.0.1",
				"5000",
				configFile,
				"-t", ""+NUM_TURNS,
				"-l", logFileName,
			}; 
		
		CycledClient client;
		
		System.out.printf("STARTING SIMULATION WITH SC-TSP...\n");
		client = new CycledClient(args);
		client.start();		
		System.out.println("SIMULATION STARTED!");	
		client.join();		
		System.out.println("SIMULATION FINISHED!");
	}

	
}
