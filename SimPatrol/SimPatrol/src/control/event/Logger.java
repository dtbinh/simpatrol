/* Logger.java */

/* The package of this class. */
package control.event;

/* Imported classes and/or interfaces. */
import java.util.LinkedList;
import model.Environment;
import model.agent.Society;
import control.simulator.Simulator;
import view.connection.UDPConnection;

/**
 * This class represents a simple control.event. It might be used by aspects and other
 * logging code.
 */
public abstract class Logger {
	/* Attributes. */
	/** The UDP connections used to output the events generated by the simulator. */
	private static LinkedList<UDPConnectionAndBooleanValue> connections;

	/** The simulator that generates the logged events. */
	private static Simulator simulator;

	/* Methods. */
	/**
	 * Configures the simulator shared among the generated events.
	 * 
	 * @param simpatrol_simulator
	 *            The simulator that generates the events when simulating.
	 */
	public static void setSimulator(Simulator simpatrol_simulator) {
		simulator = simpatrol_simulator;
	}

	/** Adds a connection to the list of connections used to output the events. */
	public static void addConnection(UDPConnection connection) {
		if (connections == null)
			connections = new LinkedList<UDPConnectionAndBooleanValue>();

		connections.add(new UDPConnectionAndBooleanValue(connection, false));
	}

	/** Resets the connections used to output the events. */
	public static void reset() {
		if (connections != null) {
			for (UDPConnectionAndBooleanValue connection_and_bool : connections)
				connection_and_bool.CONNECTION.stopActing();

			connections.clear();
			connections = null;
		}
	}

	/**
	 * Logs data into the console.
	 * 
	 * @param data
	 *            The data to be logged.
	 */
	public static void println(String data) {
		System.out.println(data);
	}

	/**
	 * Logs events into the remote connections.
	 * 
	 * @param event
	 *            The event to be logged.
	 */
	public static void send(Event event) {
		if (connections != null)
			for (UDPConnectionAndBooleanValue connection : connections)
				if (!connection.received_environment) {
					Environment environment = simulator.getEnvironment();

					if (environment != null){
						if(environment.getGraph().reducedToXML(0).length() > 40000){
							connection.CONNECTION.send("environment too big to be sent. Please refer to env file.\n");
							connection.received_environment = true;
						}
						else 
							connection.received_environment = connection.CONNECTION.send(environment.getGraph().reducedToXML(0));
					}

					if (connection.received_environment) {
						Society[] societies = environment.getSocieties();
						for (int i = 0; i < societies.length; i++)
							connection.received_environment = connection.CONNECTION
									.send(societies[i].reducedToXML(0));
					}

					if (connection.received_environment)
						connection.CONNECTION.send(event.fullToXML(0, simulator
								.getElapsedTime()));
				} else
					connection.CONNECTION.send(event.fullToXML(0, simulator
							.getElapsedTime()));
	}
}

/**
 * Internal class that holds together an UDP connection and a boolean value
 * indicating if this connection received a XML version of the environment being
 * simulated by SimPatrol.
 */
final class UDPConnectionAndBooleanValue {
	/** The UDP connection. */
	public final UDPConnection CONNECTION;

	/**
	 * The boolean value that expresses if the connection received a XML version
	 * of the environment.
	 */
	public boolean received_environment;

	/**
	 * Constructor.
	 * 
	 * @param connection
	 *            The UDP connection.
	 * @param received_environment
	 *            TRUE if the connection received a XML version of the
	 *            environment, FALSE if not.
	 */
	public UDPConnectionAndBooleanValue(UDPConnection connection,
			boolean received_environment) {
		this.CONNECTION = connection;
		this.received_environment = received_environment;
	}
}